$date
	Tue Nov 28 20:30:40 2023
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module tb $end
$var wire 1 ! halt $end
$var reg 1 " clk $end
$var reg 1 # exit $end
$var reg 1 $ rst $end
$scope module CPU $end
$var wire 32 % DataInM [31:0] $end
$var wire 1 " clk $end
$var wire 1 ! halt $end
$var wire 1 $ rst $end
$var wire 5 & rs2 [4:0] $end
$var wire 5 ' rs1 [4:0] $end
$var wire 5 ( rd [4:0] $end
$var wire 32 ) load_store_effective_addr [31:0] $end
$var wire 1 * halt_overall $end
$var wire 1 + halt_MEM_forward $end
$var wire 1 , halt_MEM_backward $end
$var wire 1 - halt_EX_forward $end
$var wire 1 . halt_EX_backward $end
$var wire 1 / flush_pipeline $end
$var wire 32 0 branch_or_jump_target_addr [31:0] $end
$var wire 1 1 branch_flag $end
$var wire 1 2 RF_WEN $end
$var wire 32 3 PC [31:0] $end
$var wire 1 4 MEM_stall $end
$var wire 5 5 MEM_rd [4:0] $end
$var wire 32 6 MEM_out [31:0] $end
$var wire 1 7 MEM_RWEN $end
$var wire 32 8 InstWord [31:0] $end
$var wire 1 9 IF_stall $end
$var wire 32 : IF_PC [31:0] $end
$var wire 32 ; IF_InstData [31:0] $end
$var wire 1 < ID_stall $end
$var wire 5 = ID_rs2 [4:0] $end
$var wire 5 > ID_rs1 [4:0] $end
$var wire 5 ? ID_rd [4:0] $end
$var wire 7 @ ID_opcode [6:0] $end
$var wire 32 A ID_imm_UJ [31:0] $end
$var wire 32 B ID_imm_U [31:0] $end
$var wire 32 C ID_imm_SB [31:0] $end
$var wire 32 D ID_imm_S [31:0] $end
$var wire 32 E ID_imm_I [31:0] $end
$var wire 7 F ID_funct7 [6:0] $end
$var wire 3 G ID_funct3 [2:0] $end
$var wire 1 H ID_RWEN $end
$var wire 32 I ID_PC [31:0] $end
$var wire 1 J ID_MEMREAD $end
$var wire 32 K ID_DataRS2 [31:0] $end
$var wire 32 L ID_DataRS1 [31:0] $end
$var wire 1 M ID_DWEN $end
$var wire 1 N EX_stall $end
$var wire 5 O EX_rd [4:0] $end
$var wire 32 P EX_out [31:0] $end
$var wire 7 Q EX_opcode [6:0] $end
$var wire 3 R EX_funct3 [2:0] $end
$var wire 1 S EX_RWEN $end
$var wire 1 T EX_MEMREAD $end
$var wire 32 U EX_DataRS2 [31:0] $end
$var wire 1 V EX_DWEN $end
$var wire 2 W DataSize [1:0] $end
$var wire 32 X DataRS2 [31:0] $end
$var wire 32 Y DataRS1 [31:0] $end
$var wire 32 Z DataOutM [31:0] $end
$var wire 32 [ DataInRd [31:0] $end
$var wire 32 \ DataAddr [31:0] $end
$var wire 1 ] DWEN $end
$scope module DMEM $end
$var wire 32 ^ AddrH [31:0] $end
$var wire 32 _ AddrW [31:0] $end
$var wire 1 " CLK $end
$var wire 32 ` DataIn [31:0] $end
$var wire 1 ] WEN $end
$var wire 2 a Size [1:0] $end
$var wire 32 b Addr [31:0] $end
$var reg 32 c DataOut [31:0] $end
$upscope $end
$scope module EX $end
$var wire 1 T EX_MEMREAD $end
$var wire 1 S EX_RWEN $end
$var wire 5 d EX_rd [4:0] $end
$var wire 1 4 MEM_stall $end
$var wire 1 1 branch_flag $end
$var wire 32 e branch_or_jump_target_addr [31:0] $end
$var wire 1 " clk $end
$var wire 1 / flush_pipeline $end
$var wire 1 . halt_EX_backward $end
$var wire 32 f out_upper_imm [31:0] $end
$var wire 32 g out_jump [31:0] $end
$var wire 32 h out_arithmetic [31:0] $end
$var wire 32 i out_ari_imm [31:0] $end
$var wire 32 j load_store_effective_addr_internal [31:0] $end
$var wire 32 k load_store_effective_addr [31:0] $end
$var wire 32 l jump_target_addr [31:0] $end
$var wire 1 m halt_jump $end
$var wire 1 n halt_effective_addr $end
$var wire 1 o halt_branch $end
$var wire 1 p halt_arithmetic $end
$var wire 1 q halt_ari_imm $end
$var wire 1 , halt_MEM_backward $end
$var wire 1 r halt_EX_internal $end
$var wire 1 - halt_EX_forward $end
$var wire 32 s branch_target_addr [31:0] $end
$var wire 1 t branch_flag_internal $end
$var wire 5 u MEM_rd [4:0] $end
$var wire 32 v MEM_out [31:0] $end
$var wire 1 7 MEM_RWEN $end
$var wire 5 w ID_rs2 [4:0] $end
$var wire 5 x ID_rs1 [4:0] $end
$var wire 5 y ID_rd [4:0] $end
$var wire 7 z ID_opcode [6:0] $end
$var wire 32 { ID_imm_UJ [31:0] $end
$var wire 32 | ID_imm_U [31:0] $end
$var wire 32 } ID_imm_SB [31:0] $end
$var wire 32 ~ ID_imm_S [31:0] $end
$var wire 32 !" ID_imm_I [31:0] $end
$var wire 7 "" ID_funct7 [6:0] $end
$var wire 3 #" ID_funct3 [2:0] $end
$var wire 1 H ID_RWEN $end
$var wire 32 $" ID_PC [31:0] $end
$var wire 1 J ID_MEMREAD $end
$var wire 32 %" ID_DataRS2 [31:0] $end
$var wire 32 &" ID_DataRS1 [31:0] $end
$var wire 1 M ID_DWEN $end
$var wire 1 N EX_stall $end
$var wire 32 '" EX_out [31:0] $end
$var wire 7 (" EX_opcode [6:0] $end
$var wire 3 )" EX_funct3 [2:0] $end
$var wire 32 *" EX_DataRS2 [31:0] $end
$var wire 1 V EX_DWEN $end
$var wire 32 +" DataRS2_forwarded [31:0] $end
$var wire 32 ," DataRS1_forwarded [31:0] $end
$var reg 1 V EX_DWEN_reg $end
$var reg 32 -" EX_DataRS2_reg [31:0] $end
$var reg 1 ." EX_MEMREAD_reg $end
$var reg 1 /" EX_RWEN_reg $end
$var reg 3 0" EX_funct3_reg [2:0] $end
$var reg 7 1" EX_opcode_reg [6:0] $end
$var reg 32 2" EX_out_reg [31:0] $end
$var reg 5 3" EX_rd_reg [4:0] $end
$var reg 1 4" MEM_stall_reg $end
$var reg 1 5" branch_flag_reg $end
$var reg 32 6" branch_or_jump_target_addr_reg [31:0] $end
$var reg 1 7" flush_pipeline_reg $end
$var reg 1 - halt_EX_forward_reg $end
$var reg 32 8" load_store_effective_addr_reg [31:0] $end
$scope module ai0 $end
$var wire 32 9" DataRS1 [31:0] $end
$var wire 1 q halt $end
$var wire 32 :" out_srai [31:0] $end
$var wire 1 ;" out_slti $end
$var wire 32 <" out [31:0] $end
$var wire 32 =" imm_I [31:0] $end
$var wire 3 >" funct3 [2:0] $end
$scope module ars0 $end
$var wire 32 ?" opA [31:0] $end
$var wire 32 @" out [31:0] $end
$var wire 32 A" opB [31:0] $end
$upscope $end
$scope module slt0 $end
$var wire 32 B" opA [31:0] $end
$var wire 1 ;" out $end
$var wire 32 C" opB [31:0] $end
$upscope $end
$upscope $end
$scope module ar0 $end
$var wire 32 D" DataRS1 [31:0] $end
$var wire 32 E" DataRS2 [31:0] $end
$var wire 1 p halt $end
$var wire 32 F" out_sra [31:0] $end
$var wire 1 G" out_slt $end
$var wire 32 H" out [31:0] $end
$var wire 7 I" funct7 [6:0] $end
$var wire 3 J" funct3 [2:0] $end
$scope module ars0 $end
$var wire 32 K" opA [31:0] $end
$var wire 32 L" opB [31:0] $end
$var wire 32 M" out [31:0] $end
$upscope $end
$scope module slt0 $end
$var wire 32 N" opA [31:0] $end
$var wire 32 O" opB [31:0] $end
$var wire 1 G" out $end
$upscope $end
$upscope $end
$scope module br0 $end
$var wire 1 P" beq $end
$var wire 1 Q" bge $end
$var wire 1 R" bgeu $end
$var wire 1 S" blt $end
$var wire 1 T" bltu $end
$var wire 1 U" bne $end
$var wire 1 t branch_flag $end
$var wire 1 o halt $end
$var wire 32 V" opA [31:0] $end
$var wire 32 W" opB [31:0] $end
$var wire 1 X" slt $end
$var wire 32 Y" imm_SB [31:0] $end
$var wire 3 Z" funct3 [2:0] $end
$var wire 32 [" branch_target_addr [31:0] $end
$var wire 32 \" PC [31:0] $end
$scope module slt0 $end
$var wire 32 ]" opA [31:0] $end
$var wire 32 ^" opB [31:0] $end
$var wire 1 X" out $end
$upscope $end
$upscope $end
$scope module ea0 $end
$var wire 32 _" DataRS1 [31:0] $end
$var wire 7 `" opcode [6:0] $end
$var wire 32 a" imm_S [31:0] $end
$var wire 32 b" imm_I [31:0] $end
$var wire 1 c" halt_alignment $end
$var wire 1 n halt $end
$var wire 3 d" funct3 [2:0] $end
$var wire 32 e" EffectiveDataAddr [31:0] $end
$upscope $end
$scope module ju0 $end
$var wire 32 f" DataRS1 [31:0] $end
$var wire 32 g" out [31:0] $end
$var wire 7 h" opcode [6:0] $end
$var wire 32 i" imm_UJ [31:0] $end
$var wire 32 j" imm_I [31:0] $end
$var wire 1 m halt $end
$var wire 3 k" funct3 [2:0] $end
$var wire 32 l" PC_next [31:0] $end
$var wire 32 m" PC [31:0] $end
$upscope $end
$scope module ui0 $end
$var wire 32 n" out [31:0] $end
$var wire 7 o" opcode [6:0] $end
$var wire 32 p" imm_U [31:0] $end
$var wire 32 q" PC [31:0] $end
$upscope $end
$upscope $end
$scope module ID $end
$var wire 1 r" EX_MEMREAD $end
$var wire 5 s" EX_rd [4:0] $end
$var wire 1 N EX_stall $end
$var wire 1 M ID_DWEN $end
$var wire 1 H ID_RWEN $end
$var wire 1 9 IF_stall $end
$var wire 5 t" RF_rs1 [4:0] $end
$var wire 5 u" RF_rs2 [4:0] $end
$var wire 1 " clk $end
$var wire 1 / flush_pipeline $end
$var wire 1 . halt_EX $end
$var wire 1 v" load_stall $end
$var wire 5 w" rs2 [4:0] $end
$var wire 5 x" rs1 [4:0] $end
$var wire 5 y" rd [4:0] $end
$var wire 7 z" opcode [6:0] $end
$var wire 32 {" imm_UJ [31:0] $end
$var wire 32 |" imm_U [31:0] $end
$var wire 32 }" imm_SB [31:0] $end
$var wire 32 ~" imm_S [31:0] $end
$var wire 32 !# imm_I [31:0] $end
$var wire 1 , halt_MEM $end
$var wire 7 "# funct7 [6:0] $end
$var wire 3 ## funct3 [2:0] $end
$var wire 1 $# RWEN $end
$var wire 1 2 RF_WEN $end
$var wire 5 %# RF_Rd [4:0] $end
$var wire 32 &# RF_DataInRd [31:0] $end
$var wire 1 '# MEMREAD $end
$var wire 32 (# IF_PC [31:0] $end
$var wire 32 )# IF_InstData [31:0] $end
$var wire 1 < ID_stall $end
$var wire 5 *# ID_rs2 [4:0] $end
$var wire 5 +# ID_rs1 [4:0] $end
$var wire 5 ,# ID_rd [4:0] $end
$var wire 7 -# ID_opcode [6:0] $end
$var wire 32 .# ID_imm_UJ [31:0] $end
$var wire 32 /# ID_imm_U [31:0] $end
$var wire 32 0# ID_imm_SB [31:0] $end
$var wire 32 1# ID_imm_S [31:0] $end
$var wire 32 2# ID_imm_I [31:0] $end
$var wire 7 3# ID_funct7 [6:0] $end
$var wire 3 4# ID_funct3 [2:0] $end
$var wire 32 5# ID_PC [31:0] $end
$var wire 1 J ID_MEMREAD $end
$var wire 32 6# ID_DataRS2 [31:0] $end
$var wire 32 7# ID_DataRS1 [31:0] $end
$var wire 32 8# DataRS2_forwarded [31:0] $end
$var wire 32 9# DataRS2 [31:0] $end
$var wire 32 :# DataRS1_forwarded [31:0] $end
$var wire 32 ;# DataRS1 [31:0] $end
$var wire 1 <# DWEN $end
$var reg 1 =# EX_stall_reg $end
$var reg 1 ># ID_DWEN_reg $end
$var reg 32 ?# ID_DataRS1_reg [31:0] $end
$var reg 32 @# ID_DataRS2_reg [31:0] $end
$var reg 1 J ID_MEMREAD_reg $end
$var reg 32 A# ID_PC_reg [31:0] $end
$var reg 1 B# ID_RWEN_reg $end
$var reg 3 C# ID_funct3_reg [2:0] $end
$var reg 7 D# ID_funct7_reg [6:0] $end
$var reg 32 E# ID_imm_I_reg [31:0] $end
$var reg 32 F# ID_imm_SB_reg [31:0] $end
$var reg 32 G# ID_imm_S_reg [31:0] $end
$var reg 32 H# ID_imm_UJ_reg [31:0] $end
$var reg 32 I# ID_imm_U_reg [31:0] $end
$var reg 7 J# ID_opcode_reg [6:0] $end
$var reg 5 K# ID_rd_reg [4:0] $end
$var reg 5 L# ID_rs1_reg [4:0] $end
$var reg 5 M# ID_rs2_reg [4:0] $end
$scope module p0 $end
$var wire 5 N# rs2 [4:0] $end
$var wire 5 O# rs1 [4:0] $end
$var wire 5 P# rd [4:0] $end
$var wire 7 Q# opcode [6:0] $end
$var wire 32 R# inst_data [31:0] $end
$var wire 32 S# imm_UJ [31:0] $end
$var wire 32 T# imm_U [31:0] $end
$var wire 32 U# imm_SB [31:0] $end
$var wire 32 V# imm_S [31:0] $end
$var wire 32 W# imm_I [31:0] $end
$var wire 7 X# funct7 [6:0] $end
$var wire 3 Y# funct3 [2:0] $end
$var wire 1 $# RWEN $end
$var wire 1 '# MEMREAD $end
$var wire 1 <# DWEN $end
$upscope $end
$upscope $end
$scope module IF $end
$var wire 1 < ID_stall $end
$var wire 32 Z# IF_PC [31:0] $end
$var wire 1 9 IF_stall $end
$var wire 1 1 branch_flag $end
$var wire 32 [# branch_or_jump_target_addr [31:0] $end
$var wire 1 " clk $end
$var wire 1 / flush_pipeline $end
$var wire 1 . halt_EX $end
$var wire 1 $ rst $end
$var wire 1 , halt_MEM $end
$var wire 32 \# PC [31:0] $end
$var wire 32 ]# InstWord [31:0] $end
$var wire 32 ^# IF_InstData [31:0] $end
$var reg 1 _# ID_stall_reg $end
$var reg 32 `# IF_InstData_reg [31:0] $end
$var reg 32 a# IF_PC_reg [31:0] $end
$var reg 32 b# PC_reg [31:0] $end
$upscope $end
$scope module IMEM $end
$var wire 32 c# Addr [31:0] $end
$var wire 32 d# AddrW [31:0] $end
$var wire 1 " CLK $end
$var wire 2 e# Size [1:0] $end
$var reg 32 f# DataOut [31:0] $end
$upscope $end
$scope module MA $end
$var wire 1 ] DWEN $end
$var wire 32 g# DataAddr [31:0] $end
$var wire 32 h# DataInM [31:0] $end
$var wire 32 i# DataOutM [31:0] $end
$var wire 1 V EX_DWEN $end
$var wire 32 j# EX_DataRS2 [31:0] $end
$var wire 1 S EX_RWEN $end
$var wire 3 k# EX_funct3 [2:0] $end
$var wire 7 l# EX_opcode [6:0] $end
$var wire 32 m# EX_out [31:0] $end
$var wire 5 n# EX_rd [4:0] $end
$var wire 1 4 MEM_stall $end
$var wire 1 " clk $end
$var wire 1 - halt_EX_forward $end
$var wire 1 , halt_MEM_backward $end
$var wire 1 + halt_MEM_forward $end
$var wire 1 o# halt_MEM_internal $end
$var wire 32 p# load_store_effective_addr [31:0] $end
$var wire 32 q# out_store [31:0] $end
$var wire 32 r# out_load [31:0] $end
$var wire 1 s# halt_store $end
$var wire 1 t# halt_load $end
$var wire 1 u# halt_MEM_opcode $end
$var wire 5 v# MEM_rd [4:0] $end
$var wire 32 w# MEM_out [31:0] $end
$var wire 1 7 MEM_RWEN $end
$var wire 2 x# DataSize [1:0] $end
$var reg 1 7 MEM_RWEN_reg $end
$var reg 32 y# MEM_out_reg [31:0] $end
$var reg 5 z# MEM_rd_reg [4:0] $end
$var reg 1 {# halt_MEM_forward_reg $end
$scope module le0 $end
$var wire 3 |# funct3 [2:0] $end
$var wire 1 t# halt $end
$var wire 32 }# mem_val [31:0] $end
$var wire 32 ~# out [31:0] $end
$upscope $end
$scope module se0 $end
$var wire 32 !$ DataRS2 [31:0] $end
$var wire 3 "$ funct3 [2:0] $end
$var wire 32 #$ out [31:0] $end
$var wire 1 s# halt $end
$upscope $end
$upscope $end
$scope module RF $end
$var wire 5 $$ AddrA [4:0] $end
$var wire 5 %$ AddrB [4:0] $end
$var wire 1 " CLK $end
$var wire 1 2 WenW $end
$var wire 32 &$ DataInW [31:0] $end
$var wire 5 '$ AddrW [4:0] $end
$var reg 32 ($ DataOutA [31:0] $end
$var reg 32 )$ DataOutB [31:0] $end
$upscope $end
$scope module RWB $end
$var wire 1 7 MEM_RWEN $end
$var wire 32 *$ MEM_out [31:0] $end
$var wire 5 +$ MEM_rd [4:0] $end
$var wire 1 2 RF_WEN $end
$var wire 1 " clk $end
$var wire 1 + halt_MEM_forward $end
$var wire 5 ,$ rd [4:0] $end
$var wire 1 * halt_overall $end
$var wire 32 -$ DataInRd [31:0] $end
$var reg 1 * halt_overall_reg $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
$end
#0
$dumpvars
bx -$
bx ,$
bx +$
bx *$
bx )$
bx ($
bx '$
bx &$
bx %$
bx $$
bx #$
bx "$
bx !$
bx ~#
bx }#
bx |#
x{#
bx z#
bx y#
bx x#
bx w#
bx v#
xu#
xt#
xs#
bx r#
bx q#
bx p#
xo#
bx n#
bx m#
bx l#
bx k#
bx j#
bx i#
bz h#
bx g#
b1000101000010110000011 f#
b10 e#
b0 d#
b0 c#
b0 b#
bx a#
bx `#
0_#
bx ^#
b1000101000010110000011 ]#
b0 \#
bx [#
bx Z#
bx Y#
bx X#
bx W#
bx V#
bx0 U#
bx000000000000 T#
bx0 S#
bx R#
bx Q#
bx P#
bx O#
bx N#
bx M#
bx L#
bx K#
bx J#
bx000000000000 I#
bx0 H#
bx G#
bx0 F#
bx E#
bx D#
bx C#
xB#
bx A#
bx @#
bx ?#
x>#
0=#
x<#
bx ;#
bx :#
bx 9#
bx 8#
bx 7#
bx 6#
bx 5#
bx 4#
bx 3#
bx 2#
bx 1#
bx0 0#
bx000000000000 /#
bx0 .#
bx -#
bx ,#
bx +#
bx *#
bx )#
bx (#
x'#
bx &#
bx %#
x$#
bx ##
bx "#
bx !#
bx ~"
bx0 }"
bx000000000000 |"
bx0 {"
bx z"
bx y"
bx x"
bx w"
xv"
bx u"
bx t"
bz s"
zr"
bx q"
bx000000000000 p"
bx o"
bx n"
bx m"
bx l"
bx k"
bx j"
bx0 i"
bx h"
bx g"
bx f"
bx e"
bx d"
xc"
bx b"
bx a"
bx `"
bx _"
bx ^"
bx ]"
bx \"
bx ["
bx Z"
bx0 Y"
xX"
bx W"
bx V"
xU"
xT"
xS"
xR"
xQ"
xP"
bx O"
bx N"
bx M"
bx L"
bx K"
bx J"
bx I"
bx H"
xG"
bx F"
bx E"
bx D"
bx C"
bx B"
bx A"
bx @"
bx ?"
bx >"
bx ="
bx <"
x;"
bx :"
bx 9"
bx 8"
x7"
bx 6"
x5"
x4"
bx 3"
bx 2"
bx 1"
bx 0"
1/"
0."
bx -"
bx ,"
bx +"
bx *"
bx )"
bx ("
bx '"
bx &"
bx %"
bx $"
bx #"
bx ""
bx !"
bx ~
bx0 }
bx000000000000 |
bx0 {
bx z
bx y
bx x
bx w
bx v
bx u
xt
bx s
xr
xq
xp
xo
xn
xm
bx l
bx k
bx j
bx i
bx h
bx g
bx f
bx e
bx d
bx c
bx b
bx a
bz `
bx00 _
bx0 ^
1]
bx \
bx [
bx Z
bx Y
bx X
bx W
1V
bx U
0T
1S
bx R
bx Q
bx P
bx O
0N
xM
bx L
bx K
xJ
bx I
xH
bx G
bx F
bx E
bx D
bx0 C
bx000000000000 B
bx0 A
bx @
bx ?
bx >
bx =
0<
bx ;
bx :
x9
b1000101000010110000011 8
x7
bx 6
bx 5
x4
b0 3
x2
x1
bx 0
x/
x.
x-
x,
x+
0*
bx )
bx (
bx '
bx &
bz %
1$
0#
0"
0!
$end
#5
1"
#10
0$#
b0 8#
b0 :#
b1011000010110110011 8
b1011000010110110011 ]#
b1011000010110110011 f#
b0 X
b0 9#
b0 )$
b0 Y
b0 ;#
b0 ($
b0 [
b0 &#
b0 &$
b0 -$
b100 d#
b101000000000000010 {"
b101000000000000010 S#
b1000101000000000000000 |"
b1000101000000000000000 T#
b100000001010 }"
b100000001010 U#
b1011 ~"
b1011 V#
b10 !#
b10 W#
1<#
1'#
b11 z"
b11 Q#
b1011 y"
b1011 P#
b10 &
b10 u"
b10 %$
b10 w"
b10 N#
b101 '
b101 t"
b101 $$
b101 x"
b101 O#
b0 ##
b0 Y#
b0 "#
b0 X#
12
17
b100 3
b100 \#
b100 b#
b100 c#
b0 :
b0 (#
b0 Z#
b0 a#
b1000101000010110000011 ;
b1000101000010110000011 )#
b1000101000010110000011 R#
b1000101000010110000011 ^#
b1000101000010110000011 `#
0"
#15
1"
#20
1t
0p
0.
0r
b0 h
b0 H"
0G"
0X"
1;"
b10 i
b10 <"
b0 :"
b0 @"
b0 F"
b0 M"
b10 j
b10 e"
1P"
b0 f
b0 n"
b0 l
b0 l"
0n
0c"
0q
b0 +"
b0 E"
b0 L"
b0 O"
b0 W"
b0 ^"
b0 ,"
b0 9"
b0 ?"
b0 B"
b0 D"
b0 K"
b0 N"
b0 V"
b0 ]"
b0 _"
b0 f"
19
1v"
b101101011000011000110011 8
b101101011000011000110011 ]#
b101101011000011000110011 f#
1m
0o
0R"
0T"
0Q"
0S"
0U"
b1000 d#
b1011000000000000000 {"
b1011000000000000000 S#
b1011000000000000000 |"
b1011000000000000000 T#
b0 !#
b0 W#
0'#
b110011 z"
b110011 Q#
b0 &
b0 u"
b0 %$
b0 w"
b0 N#
b1011 '
b1011 t"
b1011 $$
b1011 x"
b1011 O#
b100 g
b100 g"
b100000001010 s
b100000001010 ["
b0 I
b0 $"
b0 \"
b0 m"
b0 q"
b0 5#
b0 A#
b101000000000000010 A
b101000000000000010 {
b101000000000000010 i"
b101000000000000010 .#
b101000000000000010 H#
b1000101000000000000000 B
b1000101000000000000000 |
b1000101000000000000000 p"
b1000101000000000000000 /#
b1000101000000000000000 I#
b100000001010 C
b100000001010 }
b100000001010 Y"
b100000001010 0#
b100000001010 F#
b1011 D
b1011 ~
b1011 a"
b1011 1#
b1011 G#
b10 E
b10 !"
b10 ="
b10 A"
b10 C"
b10 b"
b10 j"
b10 2#
b10 E#
b11 @
b11 z
b11 `"
b11 h"
b11 o"
b11 -#
b11 J#
b0 G
b0 #"
b0 >"
b0 J"
b0 Z"
b0 d"
b0 k"
b0 4#
b0 C#
b1011 ?
b1011 y
b1011 ,#
b1011 K#
b10 =
b10 w
b10 *#
b10 M#
b101 >
b101 x
b101 +#
b101 L#
b0 F
b0 ""
b0 I"
b0 3#
b0 D#
b0 K
b0 %"
b0 6#
b0 @#
b0 L
b0 &"
b0 7#
b0 ?#
1J
1M
1>#
0H
0B#
b1000 3
b1000 \#
b1000 b#
b1000 c#
b100 :
b100 (#
b100 Z#
b100 a#
b1011000010110110011 ;
b1011000010110110011 )#
b1011000010110110011 R#
b1011000010110110011 ^#
b1011000010110110011 `#
0"
#25
1"
#30
b100010 r#
b100010 ~#
0u#
0;"
b0 i
b0 <"
0t#
b0 q#
b0 #$
0s#
b100010001000100010001000100010 Z
b100010001000100010001000100010 c
b100010001000100010001000100010 i#
b100010001000100010001000100010 }#
b0 j
b0 e"
09
0v"
b0 W
b0 a
b0 x#
b0 _
b10 ^
04
04"
0/
07"
1T
1."
b11 Q
b11 ("
b11 1"
b11 l#
b0 R
b0 )"
b0 0"
b0 k#
b0 |#
b0 "$
b0 U
b0 *"
b0 -"
b0 j#
b0 !$
b10 \
b10 b
b10 g#
b10 )
b10 k
b10 8"
b10 p#
b0 0
b0 e
b0 [#
b0 6"
01
05"
0S
0/"
b1011 O
b1011 d
b1011 n#
b1011 3"
b0 P
b0 '"
b0 2"
b0 m#
1N
1=#
b1000 g
b1000 g"
b100000001110 s
b100000001110 ["
b100 I
b100 $"
b100 \"
b100 m"
b100 q"
b100 5#
b100 A#
b1011000000000000000 A
b1011000000000000000 {
b1011000000000000000 i"
b1011000000000000000 .#
b1011000000000000000 H#
b1011000000000000000 B
b1011000000000000000 |
b1011000000000000000 p"
b1011000000000000000 /#
b1011000000000000000 I#
b0 E
b0 !"
b0 ="
b0 A"
b0 C"
b0 b"
b0 j"
b0 2#
b0 E#
b110011 @
b110011 z
b110011 `"
b110011 h"
b110011 o"
b110011 -#
b110011 J#
b0 =
b0 w
b0 *#
b0 M#
b1011 >
b1011 x
b1011 +#
b1011 L#
0J
1H
1B#
0"
#35
1"
#40
0t
b100010 h
b100010 H"
b100010 i
b100010 <"
b100010 :"
b100010 @"
b100010 F"
b100010 M"
0P"
b100010 ,"
b100010 9"
b100010 ?"
b100010 B"
b100010 D"
b100010 K"
b100010 N"
b100010 V"
b100010 ]"
b100010 _"
b100010 f"
b100010 8#
b100010 :#
b0 8
b0 ]#
b0 f#
b100010 [
b100010 &#
b100010 &$
b100010 -$
b1100 d#
b1011000100000001010 {"
b1011000100000001010 S#
b101101011000000000000000 |"
b101101011000000000000000 T#
b1100 }"
b1100 U#
b1100 ~"
b1100 V#
b1011 !#
b1011 W#
b1100 y"
b1100 P#
b1011 &
b1011 u"
b1011 %$
b1011 w"
b1011 N#
0N
0=#
0H
0B#
14
14"
1S
1/"
02
07
b100010 6
b100010 v
b100010 w#
b100010 y#
b100010 *$
b1011 (
b1011 %#
b1011 '$
b1011 ,$
b1011 5
b1011 u
b1011 v#
b1011 z#
b1011 +$
b1100 3
b1100 \#
b1100 b#
b1100 c#
b1000 :
b1000 (#
b1000 Z#
b1000 a#
b101101011000011000110011 ;
b101101011000011000110011 )#
b101101011000011000110011 R#
b101101011000011000110011 ^#
b101101011000011000110011 `#
0"
#45
1"
#50
1t
b1000100 h
b1000100 H"
b11111111111111111111111110000011 r#
b11111111111111111111111110000011 ~#
b1000 F"
b1000 M"
b101101 i
b101101 <"
1P"
b0 8#
b0 :#
b0 :"
b0 @"
b100010 +"
b100010 E"
b100010 L"
b100010 O"
b100010 W"
b100010 ^"
1$#
b0 [
b0 &#
b0 &$
b0 -$
b0 ^
b10000011100000111000001110000011 Z
b10000011100000111000001110000011 c
b10000011100000111000001110000011 i#
b10000011100000111000001110000011 }#
b10000 d#
b0 {"
b0 S#
b0 |"
b0 T#
b0 }"
b0 U#
b0 ~"
b0 V#
b0 !#
b0 W#
b0 z"
b0 Q#
b0 y"
b0 P#
b0 &
b0 u"
b0 %$
b0 w"
b0 N#
b0 '
b0 t"
b0 $$
b0 x"
b0 O#
12
17
04
04"
0T
0."
b110011 Q
b110011 ("
b110011 1"
b110011 l#
b0 \
b0 b
b0 g#
b0 )
b0 k
b0 8"
b0 p#
0S
0/"
b100010 P
b100010 '"
b100010 2"
b100010 m#
b1100 g
b1100 g"
b1000 I
b1000 $"
b1000 \"
b1000 m"
b1000 q"
b1000 5#
b1000 A#
b1011000100000001010 A
b1011000100000001010 {
b1011000100000001010 i"
b1011000100000001010 .#
b1011000100000001010 H#
b101101011000000000000000 B
b101101011000000000000000 |
b101101011000000000000000 p"
b101101011000000000000000 /#
b101101011000000000000000 I#
b10100 s
b10100 ["
b1100 C
b1100 }
b1100 Y"
b1100 0#
b1100 F#
b1100 D
b1100 ~
b1100 a"
b1100 1#
b1100 G#
b1011 E
b1011 !"
b1011 ="
b1011 A"
b1011 C"
b1011 b"
b1011 j"
b1011 2#
b1011 E#
b1100 ?
b1100 y
b1100 ,#
b1100 K#
b1011 =
b1011 w
b1011 *#
b1011 M#
b100010 K
b100010 %"
b100010 6#
b100010 @#
b100010 L
b100010 &"
b100010 7#
b100010 ?#
b10000 3
b10000 \#
b10000 b#
b10000 c#
b1100 :
b1100 (#
b1100 Z#
b1100 a#
b0 ;
b0 )#
b0 R#
b0 ^#
b0 `#
0"
#55
1"
#60
b0 h
b0 H"
b100010 q#
b100010 #$
b0 i
b0 <"
1.
1r
b0 F"
b0 M"
b0 ,"
b0 9"
b0 ?"
b0 B"
b0 D"
b0 K"
b0 N"
b0 V"
b0 ]"
b0 _"
b0 f"
b0 +"
b0 E"
b0 L"
b0 O"
b0 W"
b0 ^"
b100010 [
b100010 &#
b100010 &$
b100010 -$
b10100 d#
b10000 g
b10000 g"
b1100 I
b1100 $"
b1100 \"
b1100 m"
b1100 q"
b1100 5#
b1100 A#
b0 A
b0 {
b0 i"
b0 .#
b0 H#
b0 B
b0 |
b0 p"
b0 /#
b0 I#
b1100 s
b1100 ["
b0 C
b0 }
b0 Y"
b0 0#
b0 F#
b0 D
b0 ~
b0 a"
b0 1#
b0 G#
b0 E
b0 !"
b0 ="
b0 A"
b0 C"
b0 b"
b0 j"
b0 2#
b0 E#
b0 @
b0 z
b0 `"
b0 h"
b0 o"
b0 -#
b0 J#
b0 ?
b0 y
b0 ,#
b0 K#
b0 =
b0 w
b0 *#
b0 M#
b0 >
b0 x
b0 +#
b0 L#
b0 K
b0 %"
b0 6#
b0 @#
b0 L
b0 &"
b0 7#
b0 ?#
1H
1B#
b100010 U
b100010 *"
b100010 -"
b100010 j#
b100010 !$
b1100 O
b1100 d
b1100 n#
b1100 3"
b1000100 P
b1000100 '"
b1000100 2"
b1000100 m#
02
07
b10100 3
b10100 \#
b10100 b#
b10100 c#
b10000 :
b10000 (#
b10000 Z#
b10000 a#
0"
#65
1"
#70
b1000100 [
b1000100 &#
b1000100 &$
b1000100 -$
1,
1o#
b1000100 6
b1000100 v
b1000100 w#
b1000100 y#
b1000100 *$
b1100 (
b1100 %#
b1100 '$
b1100 ,$
b1100 5
b1100 u
b1100 v#
b1100 z#
b1100 +$
1-
1S
1/"
0"
#75
1"
#80
b0 [
b0 &#
b0 &$
b0 -$
1+
1{#
12
17
0"
#85
1"
#90
1!
1*
0"
#95
1#
1"
